{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Get Funda from users\r\n// Withdraw funds\r\n// Set a minimum funding value in USD\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    uint256 public constant MINIMUM_USD = 10 * 1e18;\r\n\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n\r\n    address public immutable i_owner;\r\n\r\n    // Functions Order:\r\n    // constructor\r\n    // receive\r\n    // fallback\r\n    // external\r\n    // public\r\n    // internal\r\n    // private\r\n    // view / pure\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\r\n            \"Didn't send enough\"\r\n        ); // 1e18 wei = 1 * 1^18 wei = 1Eth\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] += msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            ++funderIndex\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        // reset the array\r\n        funders = new address[](0);\r\n\r\n        // actually withdraw funds (transfer, send, call)\r\n\r\n        // transfer\r\n        // msg.sender --> address\r\n        // payable(msg.sender) --> payable address\r\n        // payable (msg.sender).transfer(address(this).balance);\r\n\r\n        // send\r\n        // bool sendSuccess = payable (msg.sender).send(address(this).balance);\r\n        // require(sendSuccess,\"Send Failed!\");\r\n\r\n        // call (recommended method)\r\n        (bool callSuccess /* bytes memory dataReturned */, ) = payable(\r\n            msg.sender\r\n        ).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call Failed\");\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // if(msg.sender != i_owner){revert NotOwner(); }\r\n        require(msg.sender == i_owner, \"You cannot withdraw\");\r\n        _;\r\n    }\r\n\r\n    // what if someone sends this contract ETH without calling the fund function.\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUsd;\r\n    }\r\n}\r\n"
    },
    "contracts/SimpleStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    // it's similar to class\n    // boolean , uint, int, address, bytes\n    // bool hasFavoriteNumber = true;\n    // string favoriteNumberInText=\"Five\";\n    // int256 favoriteInt = -5;\n    // address myAddress = 0x234d9fC1BdF6FFb0C0CBc19992C287da50390B9B;\n    // bytes32 favoriteBytes=\"cat\";\n    // uint256 favoriteNumber = 5;\n\n    uint256 private favNum; // This gets initialized to 0\n\n    struct People {\n        uint256 favNum;\n        string name;\n    }\n\n    // uint256[] public favNumList;\n    People[] public people;\n\n    mapping(string => uint256) public nameToFavNum;\n\n    function store(uint256 _favNum) public virtual {\n        favNum = _favNum;\n    }\n\n    // view , pure\n    function retrieve() public view returns (uint256) {\n        return favNum;\n    }\n\n    /* \n        type     permanent    modifiable\n\n        calldata    no           no              \n        memory      no           yes\n        storage     yes          yes   // function argument can't be of type storage.\n\n        types are only given to array, structures and mappings (string also, sice string is array of char).\n    */\n    function addPerson(string memory _name, uint256 _favNum) public {\n        people.push(People(_favNum, _name));\n        nameToFavNum[_name] = _favNum;\n    }\n}\n\n// deploy : yarn hardhat run scripts/deploySimpleStorage.js\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}